package javaThread;

import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

public class Threadtest4 implements Runnable{

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService exec = Executors.newCachedThreadPool();
		exec.execute(new Threadtest4());
	}

	public void run() {
		// TODO Auto-generated method stub
		throw new RuntimeException();
	}

}
class ExceptionThread2 implements Runnable{

	public void run() {
		// TODO Auto-generated method stub
		Thread t = Thread.currentThread();
		System.out.println("run() by"+t);
		System.out.println("en = "+t.getUncaughtExceptionHandler());
		throw new RuntimeException();
		}
}
class MyUncaughtExecHandler implements Thread.UncaughtExceptionHandler{

	public void uncaughtException(Thread t, Throwable e) {
		// TODO Auto-generated method stub
		System.out.println("caught" + e);
    	}
}
class HandlerThreadFactory implements ThreadFactory{

	public Thread newThread(Runnable r) {
		// TODO Auto-generated method stub
		System.out.println(this + "creating new Thread");
		Thread t = new Thread(r);
		System.out.println("created" + t);
		t.setUncaughtExceptionHandler(new MyUncaughtExecHandler());
		System.out.println("eh = " + t.getUncaughtExceptionHandler());
		return t;
	}
	
}