package com.example.birthdaytree;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import com.example.birthdaytree.adapter.ViewPagerAdapter;
import com.example.birthdaytree.base.DbHelper;
import com.example.birthdaytree.base.DbOperation;
import com.example.birthdaytree.bean.Person;
import com.example.birthdaytree.util.BitmapUtil;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.Toast;

public class SplashActivity extends BaseActivity implements OnClickListener,
		OnCheckedChangeListener {
	private View view1, view2, view3, view4;
	private LineEditText name, birthday, hobby;
	private RadioGroup sex;
	private String sSex;
	private ImageView next,last;
	private ImageView headImage;//头像
	private List<ImageView> lasts;
	private List<View> views;
	private NoScrollViewPager viewPager;
	private List<ImageView> points = new ArrayList<ImageView>();
	private int currPos = 0;
	private Boolean isFirst;//是否是第一次登录
	private Boolean isHaveImage = false;//是否已经设置头像
	DbOperation dbOperation;
	private Bitmap bmp;
	private Person person;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);

	}

	@Override
	public void setContentView() {
		// TODO Auto-generated method stub
		SharedPreferences setting = getSharedPreferences("setting", 0);

		if (!(isFirst = setting.getBoolean("isFirst", true))) {

			setContentView(R.layout.splash_main);
			Intent intent = new Intent(SplashActivity.this, MainActivity.class);
			startActivity(intent);
		} else {
			Log.v("setContentView", "---->");
			setContentView(R.layout.splash_main);
		}

	}
  
	@Override
	public void initViews() {
		// TODO Auto-generated method stub
		Log.v("initViews", "---->");
		viewPager = (NoScrollViewPager) this.findViewById(R.id.viewpager);
		viewPager.setNoScroll(true);
		points.add((ImageView) this.findViewById(R.id.point1));
		points.add((ImageView) this.findViewById(R.id.point2));
		points.add((ImageView) this.findViewById(R.id.point3));
		points.add((ImageView) this.findViewById(R.id.point4));
		Log.v("initViews", "---->");
		
		name = (LineEditText)this.findViewById(R.id.name);
		birthday =  (LineEditText)this.findViewById(R.id.birthday);
		next = (ImageView) this.findViewById(R.id.next);
		last = (ImageView)this.findViewById(R.id.last);
		// sex = (RadioGroup)this.findViewById(R.id.sex);
		
		Log.v("initViews", "---->");
		points.get(0).setBackgroundResource(R.drawable.point_true);
		points.get(1).setBackgroundResource(R.drawable.point_false);
		points.get(2).setBackgroundResource(R.drawable.point_false);
		points.get(3).setBackgroundResource(R.drawable.point_false);
		
		LayoutInflater inflater = getLayoutInflater().from(this);
		view1 = inflater.inflate(R.layout.splashguide1, null);
		view2 = inflater.inflate(R.layout.splashguide2, null);
		view3 = inflater.inflate(R.layout.splashguide3, null);
		view4 = inflater.inflate(R.layout.splashguide4, null);
		views = new ArrayList<View>();
		views.add(view1);
		views.add(view2);
		views.add(view3);
		views.add(view4);
		last.setVisibility(View.GONE);
	}

	@Override
	public void initListeners() {
		// TODO Auto-generated method stub

		ViewPagerAdapter adapter = new ViewPagerAdapter(views);
		viewPager.setAdapter(adapter);
		viewPager.setCurrentItem(currPos);
		Log.v("initListeners", "---->");
		next.setOnClickListener(this);
		last.setOnClickListener(this);
	}

	@Override
	public void initData() {
		// TODO Auto-generated method stub
		dbOperation = new DbOperation(SplashActivity.this, "birthdayTree.db");
		 person = new Person();
	}

	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
//		initViews();
		name = (LineEditText)this.findViewById(R.id.name);
		birthday =  (LineEditText)this.findViewById(R.id.birthday);
		next = (ImageView) this.findViewById(R.id.next);
		last = (ImageView)this.findViewById(R.id.last);
		
		int id = arg0.getId();
		int position = viewPager.getCurrentItem();
		switch (id) {
		case R.id.next:
			switch (position) {
			case 0:
				Log.v("0", "----->");
				if (TextUtils.isEmpty(name.getText())
						|| TextUtils.isEmpty(birthday.getText())) {
					Log.v(name.getText().toString(), "----->");
					Log.v(birthday.getText().toString(), "----->");
					ShowToast("你的名字或生日未设置");
					next(position);
				} else {
					person.setName(name.getText().toString().trim());
					person.setDate(birthday.getText().toString().trim()) ;
					next(position + 1);
					last.setVisibility(View.VISIBLE);
					sex = (RadioGroup) this.findViewById(R.id.sex);
					sex.setOnCheckedChangeListener(this);			
					hobby = (LineEditText)this.findViewById(R.id.hobby);
				}
				break;
			// 点击第二张页面的前进图标后
			case 1:			
				Log.v("1", "----->");
				if (TextUtils.isEmpty(hobby.getText()) || sex.isClickable()) {
					ShowToast("你的性别和爱好未设置哦");
					next(position);
				} else {
					person.setSex(sSex);
					person.setHobby(hobby.getText().toString()) ;
					next(position + 1);
					//加载未设置的图片用一个isHaveImage标识
					
					headImage = (ImageView)this.findViewById(R.id.headImage);
					headImage.setOnClickListener(this);
					last.setVisibility(View.VISIBLE);
				}
				
				break;
			//添加头像
			case 2:
				next(position + 1);
				
			ContentValues result = BitmapUtil.bmpToBlob(person.getHeadImage());
				last.setVisibility(View.VISIBLE);
				break;
			//完成
			case 3:
				Log.v(person.getName(), "----->");
				SharedPreferences settings = getSharedPreferences("setting", 0);
				SharedPreferences.Editor editor = settings.edit();
				editor.putBoolean("isFirst", false);
				editor.commit();		
				dbOperation.insertData(person,"user");
				Intent intent = new Intent(SplashActivity.this,
						MainActivity.class);
				startActivity(intent);
				last.setVisibility(View.VISIBLE);
				break;
			}

			break;
		case R.id.last:
			if(viewPager.getCurrentItem()==1){
				next(position-1);
				last.setVisibility(View.GONE);
			}else{
				next(position-1);
			}
			
			break;
		case R.id.headImage:
//			Util util = new Util();
			//util.uploadImage(this);//加载图片过程
			uploadImage();
			Bitmap image = ((BitmapDrawable)headImage.getDrawable()).getBitmap();
			person.setHeadImage(image);
			BitmapUtil.BitmapRecyle(image);
			break;
		}
	
	}
	@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // TODO Auto-generated method stub
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
          Uri  uri = data.getData();//得到选择的uri
            ContentResolver cr = this.getContentResolver();
            try {
            	
            	headImage.setImageURI(uri);
            	Bitmap image = ((BitmapDrawable)headImage.getDrawable()).getBitmap();
            	person.setHeadImage(image);
            	BitmapUtil.BitmapRecyle(image);
            	//回收bitmap
                if (bmp != null) {
                    bmp.recycle();
                    
                    bmp = BitmapFactory.decodeStream(cr.openInputStream(uri));
                }
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        } else {
            Toast.makeText(this, "选择图片失败,请重新选择", Toast.LENGTH_SHORT)
                    .show();
        }
    }
	public Boolean uploadImage(){
		CharSequence[] items = { "相册", "相机" };
        AlertDialog dialog = new AlertDialog.Builder(this)
                .setTitle("选择图片来源")
                .setItems(items, new DialogInterface.OnClickListener() {
 
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // TODO Auto-generated method stub
                        if (which == 1) {
                            Intent intent = new Intent(
                                    MediaStore.ACTION_IMAGE_CAPTURE);
                            startActivityForResult(intent, 1);
                           
                        } else {
                   
                            Intent intent = new Intent(
                                    Intent.ACTION_GET_CONTENT);
                            intent.addCategory(Intent.CATEGORY_OPENABLE);
                            intent.setType("image/*");
                            intent.putExtra("return-data", true);
                            startActivityForResult(intent, 2);
                        }
                    }
                })
                .setNegativeButton("取消", new DialogInterface.OnClickListener() {
 
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // TODO Auto-generated method stub
                        dialog.cancel();
                       
                    }
                }).create();
        dialog.show();
        return true;
	}
	private void next(int position) {
		// TODO Auto-generated method stub
		viewPager.setCurrentItem(position);
		setbg(position);
	}

	private void setbg(int currPos) {
		// TODO Auto-generated method stub
		for (int i = 0; i < 4; i++) {
			if (i == currPos) {
				points.get(i).setBackgroundResource(R.drawable.point_true);
			} else {
				points.get(i).setBackgroundResource(R.drawable.point_false);
			}
		}

	}

	@Override
	public void onCheckedChanged(RadioGroup group, int checkid) {
		// TODO Auto-generated method stub
		sSex = checkid == R.id.man ? "男" : "女";
	}

	

}
