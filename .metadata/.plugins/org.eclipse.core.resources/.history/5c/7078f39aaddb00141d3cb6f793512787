package com.example.wifiserverdemo;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import javax.crypto.Mac;



import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

public class MainActivity extends Activity implements OnClickListener {
	private Button open;
	private WifiApServerManager apServerManager;
	private String mMac;
	private WifiManager wifiManager;
	private WifiStateReceiver wifiStateReceiver;
	private WifiApStateReceiver wifiApStateReceiver;
	private Handler handler;
	private EditText editText;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        editText = (EditText)this.findViewById(R.id.editText1);
        handler = new Handler(){
        	@Override
        	public void handleMessage(Message msg) {
        		// TODO Auto-generated method stub
        		editText.setText((CharSequence) msg.obj);
        	}
        };
//        wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
        open = (Button)this.findViewById(R.id.button1);
        wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);
        apServerManager = WifiApServerManager.getInstance(wifiManager);
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();
    
            mMac = wifiInfo.getMacAddress();
   
        open.setOnClickListener(this);
        wifiStateReceiver = new WifiStateReceiver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
        registerReceiver(wifiStateReceiver, intentFilter);
        
        wifiApStateReceiver = new WifiApStateReceiver();
        IntentFilter intentFilter2 = new IntentFilter();
        intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
        registerReceiver(wifiApStateReceiver, intentFilter2);
	
    }
    
    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        unregisterReceiver(wifiStateReceiver);
//        unregisterReceiver(mWifiApStateReceiver);
    }
	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
		switch (arg0.getId()) {
		case R.id.button1:
			apServerManager.setWifiApEnabled(apServerManager.generateWifiConfiguration(
	                WifiApServerManager.AuthenticationType.TYPE_NONE, "zhouyueyue", mMac, null), true);
				
			break;

		default:
			break;
		}
	}
	public class WifiApStateReceiver extends BroadcastReceiver{

		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub

        	//
            int state = intent.getIntExtra(WifiApServerManager.EXTRA_WIFI_AP_STATE, -1);
            // 判断Wifi AP状态（由于在不同的API level中，值的定义不一致，反射获取较麻烦，此处直接用magic number判断）
            switch (state)
            {
                case 0:
                case 10:
                {
                  
                    break;
                }
                case 1:
                case 11:
                {
          
                    
                    break;
                }
                case 2:
                case 12:
                {
                 
                    break;
                }
                case 3:
                case 13:
                {
                
                    break;
                }
                case 4:
                case 14:
                {
                  
                    break;
                }
                default:
                {
                  
                    break;
                }
            }
        
		}
		
	}
	public class WifiStateReceiver extends BroadcastReceiver{

		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub

            String action = intent.getAction();
            if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action))
            {
            	//下面俩种方法都能得到wifi的状态
//            	int state = mWifiManager.getWifiState();
                int state = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1);
                switch (state)
                {
                    case WifiManager.WIFI_STATE_DISABLING:
                    {
                        
                        break;
                    }
                    case WifiManager.WIFI_STATE_DISABLED:
                    {
                       
                        break;
                    }
                    case WifiManager.WIFI_STATE_ENABLING:
                    {
                      
                        break;
                    }
                    case WifiManager.WIFI_STATE_ENABLED:
                    {
                
                        mMac = wifiManager.getConnectionInfo().getMacAddress();
                        // Wifi已上报MAC，关闭Wifi开关
                        wifiManager.setWifiEnabled(false);

                        break;
                    }
                    case WifiManager.WIFI_STATE_UNKNOWN:
                    {
                      
                        break;
                    }
                    default:
                    {
                       
                        break;
                    }
                }
            }
        
		}
		
	}
    
}
