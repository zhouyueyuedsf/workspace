package javaThread;

import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

class Pair{
	private int x,y;
	public Pair(int x,int y){
		this.x = x;
		this.y = y;
	}
	public Pair() {
		// TODO Auto-generated constructor stub
		this(0, 0);
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public void incrementX(){
		x++;
	}
	public void incrementY(){
		y++;
	}
	public String toString(){
		return "x:" + x + ".y" + y;
	}
	public class PairVNEE extends RuntimeException{
		public PairVNEE(){
			super("Pair values not equal: " + Pair.this);
		}
	}
	public void checkState(){
		if(x != y){
			throw new PairVNEE();
		}
	}
}
abstract class PairManager{
	AtomicInteger checkCounter = new AtomicInteger(0);
	protected Pair p = new Pair();
	private List<Pair> storage = Collections.synchronizedList(new ArrayList<Pair>());
	public synchronized Pair getPair(){
		return new Pair(p.getX(),p.getY());
	}
	protected void store(Pair p){
		storage.add(p);
		try {
			TimeUnit.MILLISECONDS.sleep(50);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public abstract void increment();
}
class PairManager1 extends PairManager{

	@Override
	public void increment() {
		// TODO Auto-generated method stub
		p.incrementX();
		p.incrementY();
		store(getPair());
	}
	
}
class PairManager2 extends PairManager{

	@Override
	public void increment() {
		// TODO Auto-generated method stub
		Pair temp;
		synchronized (this) {
			p.incrementX();
			p.incrementY();
			temp = getPair();
		}
		store(temp);
	}
	
}
class PairManipulator implements Runnable{
	private PairManager pm;
	public PairManipulator(PairManager pm) {
		// TODO Auto-generated constructor stub
		this.pm = pm;
	}
	
	public void run() {
		// TODO Auto-generated method stub
		while(true){
			pm.increment();
		}
	
	}
	public String toString(){
		return "Pair: " + pm.getPair() + "checkCounter =" + pm.checkCounter.get();
	}	
	
}
class PairChecker implements Runnable{
	private PairManager pm;
	public PairChecker(PairManager pm){
		this.pm = pm;
	}
	public void run() {
		// TODO Auto-generated method stub
		while(true){
			pm.checkCounter.incrementAndGet();
			pm.getPair().checkState();
		}
	}
	
	
}
public class Threadtest3_1 {
	static void testApproaches(PairManager pman1 , PairManager pman2){
		ExecutorService exec = Executors.newCachedThreadPool();
		PairManipulator pm1 = new PairManipulator(pman1);
		PairManipulator	pm2 = new PairManipulator(pman2);
		PairChecker pcheck1 = new PairChecker(pman1);
		PairChecker pcheck2 = new PairChecker(pman2);
		exec.execute(pm1);
		exec.execute(pm2);
		exec.execute(pcheck1);
		exec.execute(pcheck2);
		try {
			TimeUnit.MILLISECONDS.sleep(500);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("pm1: " + pm1 + "\npm2" + pm2);
		System.exit(0);
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PairManager pman1 = new PairManager1(),pman2 = new PairManager2();
		testApproaches(pman1, pman2);
	}

}
