package util;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.StringTokenizer;

public final class LinuxSystemTool
{
    private final static float TotalBandwidth = 1000;   //网口带宽,Mbps  
   /**
   * get memory by used info
   *
   * @return int[] result
   * result.length==4;int[0]=MemTotal;int[1]=MemFree;int[2]=SwapTotal;int[3]=SwapFree;
   * @throws IOException
   * @throws InterruptedException
   */
   public static int[] getMemInfo() throws IOException, InterruptedException
   {
      File file = new File("/proc/meminfo");
      
      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
      int[] result = new int[4];
      String str = null;
      StringTokenizer token = null;
      while((str = br.readLine()) != null)
      {
         token = new StringTokenizer(str);
         if(!token.hasMoreTokens())
            continue;
   
         str = token.nextToken();
         if(!token.hasMoreTokens())
            continue;
   
         if(str.equalsIgnoreCase("MemTotal:"))
            result[0] = Integer.parseInt(token.nextToken());
         else if(str.equalsIgnoreCase("MemFree:"))
            result[1] = Integer.parseInt(token.nextToken());
         else if(str.equalsIgnoreCase("SwapTotal:"))
            result[2] = Integer.parseInt(token.nextToken());
         else if(str.equalsIgnoreCase("SwapFree:"))
            result[3] = Integer.parseInt(token.nextToken());
      }
   
      return result;
   }

   /**
   * get memory by used info
   *
   * @return float efficiency
   * @throws IOException
   * @throws InterruptedException
   */
   public static float getCpuInfo() throws IOException, InterruptedException
   {
      File file = new File("/proc/stat");
      BufferedReader br = new BufferedReader(new InputStreamReader(
      new FileInputStream(file)));
      StringTokenizer token = new StringTokenizer(br.readLine());
      token.nextToken();
      int user1 = Integer.parseInt(token.nextToken());
      int nice1 = Integer.parseInt(token.nextToken());
      int sys1 = Integer.parseInt(token.nextToken());
      int idle1 = Integer.parseInt(token.nextToken());
   
      Thread.sleep(1000);

      br = new BufferedReader(
      new InputStreamReader(new FileInputStream(file)));
      token = new StringTokenizer(br.readLine());
      token.nextToken();
      int user2 = Integer.parseInt(token.nextToken());
      int nice2 = Integer.parseInt(token.nextToken());
      int sys2 = Integer.parseInt(token.nextToken());
      int idle2 = Integer.parseInt(token.nextToken());

      return (float)((user2 + sys2 + nice2) - (user1 + sys1 + nice1)) / (float)((user2 + nice2 + sys2 + idle2) - (user1 + nice1 + sys1 + idle1));
   }
   public static float getIOofDisk(){

       float ioUsage = 0.0f;  
       Process pro = null;  
       Runtime r = Runtime.getRuntime();  
       try {  
           String command = "iostat -d -x";  
           pro = r.exec(command);  
           BufferedReader in = new BufferedReader(new InputStreamReader(pro.getInputStream()));  
           String line = null;  
           int count =  0;  
           while((line=in.readLine()) != null){          
               if(++count >= 4){  

                   String[] temp = line.split("\\s+");  
                   if(temp.length > 1){  
                       float util =  Float.parseFloat(temp[temp.length-1]);  
                       ioUsage = (ioUsage>util)?ioUsage:util;  
                   }  
               }  
           }  
                   
           in.close();  
           pro.destroy();  
       } catch (IOException e) {  
           StringWriter sw = new StringWriter();  
           e.printStackTrace(new PrintWriter(sw));  
       }     
       return ioUsage;  
   }
   public static float getNetInfo(){
	   
	   float curRate = 0.0f;
       float netUsage = 0.0f;  
       Process pro1,pro2;  
       Runtime r = Runtime.getRuntime();  
       try {  
           String command = "cat /proc/net/dev";  
           //第一次采集流量数据  
           long startTime = System.currentTimeMillis();  
           pro1 = r.exec(command);  
           BufferedReader in1 = new BufferedReader(new InputStreamReader(pro1.getInputStream()));  
           String line = null;  
           long inSize1 = 0, outSize1 = 0;  
           while((line=in1.readLine()) != null){     
               line = line.trim();  
               if(line.startsWith("eth0")){  
           
                   String[] temp = line.split("\\s+");   
                   inSize1 = Long.parseLong(temp[1]); //Receive bytes,单位为Byte  
                   outSize1 = Long.parseLong(temp[9]);             //Transmit bytes,单位为Byte  
                   break;  
               }                 
           }     
           in1.close();  
           pro1.destroy();  
           try {  
               Thread.sleep(1000);  
           } catch (InterruptedException e) {  
               StringWriter sw = new StringWriter();  
               e.printStackTrace(new PrintWriter(sw));  
         
           }  
           //第二次采集流量数据  
           long endTime = System.currentTimeMillis();  
           pro2 = r.exec(command);  
           BufferedReader in2 = new BufferedReader(new InputStreamReader(pro2.getInputStream()));  
           long inSize2 = 0 ,outSize2 = 0;  
           while((line=in2.readLine()) != null){     
               line = line.trim();  
               if(line.startsWith("eth0")){  
         
                   String[] temp = line.split("\\s+");   
                   inSize2 = Long.parseLong(temp[1]);  
                   outSize2 = Long.parseLong(temp[9]);  
                   break;  
               }                 
           }  
           if(inSize1 != 0 && outSize1 !=0 && inSize2 != 0 && outSize2 !=0){  
               float interval = (float)(endTime - startTime)/1000;  //时间差单位为s
               //网口传输速度,单位为bps  
                curRate = (float)(inSize2 - inSize1 + outSize2 - outSize1)/(interval);  
           
           }                 
           in2.close();  
           pro2.destroy();  
       } catch (IOException e) {  
           StringWriter sw = new StringWriter();  
           e.printStackTrace(new PrintWriter(sw));  
       
       }     
       return curRate/1024;  
   
   }
}