package com.example.birthdaytree.util;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import android.content.ContentValues;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.net.Uri;
import android.util.Log;

public class BitmapUtil {
	/**
	 * 压缩bitmap
	 * 
	 * @param image
	 * @return
	 */
	public static Bitmap compress(Bitmap image) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		image.compress(Bitmap.CompressFormat.JPEG, 100, baos);// 质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
		int options = 100;
		while (baos.toByteArray().length / 1024 > 100) { // 循环判断如果压缩后图片是否大于100kb,大于继续压缩
			baos.reset();// 重置baos即清空baos
			options -= 10;// 每次都减少10
			image.compress(Bitmap.CompressFormat.JPEG, options, baos);// 这里压缩options%，把压缩后的数据存放到baos中

		}
		ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());// 把压缩后的数据baos存放到ByteArrayInputStream中
		Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);// 把ByteArrayInputStream数据生成图片
		return bitmap;
	}
	public static Bitmap comp(Bitmap image) {	
        ByteArrayOutputStream baos = new ByteArrayOutputStream();        
        image.compress(Bitmap.CompressFormat.JPEG, 100, baos);
        if( baos.toByteArray().length / 1024>1024) {//判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出    
            baos.reset();//重置baos即清空baos
            image.compress(Bitmap.CompressFormat.JPEG, 50, baos);//这里压缩50%，把压缩后的数据存放到baos中
        }
        ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());
        BitmapFactory.Options newOpts = new BitmapFactory.Options();
        //开始读入图片，此时把options.inJustDecodeBounds 设回true了
        newOpts.inJustDecodeBounds = true;
        Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
        newOpts.inJustDecodeBounds = false;
        int w = newOpts.outWidth;
        int h = newOpts.outHeight;
        //现在主流手机比较多是800*480分辨率，所以高和宽我们设置为
        float hh = 800f;//这里设置高度为800f
        float ww = 480f;//这里设置宽度为480f
        //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可
        int be = 1;//be=1表示不缩放
        if (w > h && w > ww) {//如果宽度大的话根据宽度固定大小缩放
            be = (int) (newOpts.outWidth / ww);
        } else if (w < h && h > hh) {//如果高度高的话根据宽度固定大小缩放
            be = (int) (newOpts.outHeight / hh);
        }
        if (be <= 0)
            be = 1;
        newOpts.inSampleSize = be;//设置缩放比例
        newOpts.inPreferredConfig = Config.RGB_565;//降低图片从ARGB888到RGB565
        //重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
        isBm = new ByteArrayInputStream(baos.toByteArray());
        bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
        return compress(bitmap);//压缩好比例大小后再进行质量压缩
    }

	/**
	 * bitmap转Blob存储在数据库
	 * 
	 * @param icon
	 * @return
	 */
	public static ContentValues bmpToBlob(Bitmap icon) {
		if (icon == null) {
			Log.v("icon == null", "------>");
			return new ContentValues();

		} else {
			Log.v("icon != null", "------>");
			ContentValues values = new ContentValues();
			final ByteArrayOutputStream os = new ByteArrayOutputStream();
			icon.compress(Bitmap.CompressFormat.PNG, 100, os);
			values.put("user_image", os.toByteArray());

			return values;
		}

	}

	/**
	 * bitmap to bytes
	 * 
	 * @param bit
	 * @return
	 */
	public static byte[] bmpTobytes(Bitmap bit) {
		if (bit == null) {
			return null;
		} else {
			final ByteArrayOutputStream os = new ByteArrayOutputStream();
			bit.compress(Bitmap.CompressFormat.PNG, 100, os);
			return os.toByteArray();
		}

	}

	/**
	 * 得到大小
	 * 
	 * @param image
	 * @return
	 */
	private static double getSize(Bitmap image) {
		// TODO Auto-generated method stub
		double size = Math.sqrt(image.getWidth() * image.getWidth()
				+ image.getHeight() * image.getHeight());
		return size;
	}

	/**
	 * bitmap 回收
	 * 
	 * @param bitmap
	 */
	public static void BitmapRecyle(Bitmap bitmap) {
		bitmap.recycle();
		bitmap = null;
		System.gc();
	}

	/**
	 * 转换图片成圆形
	 * 
	 * @param bitmap
	 *            传入Bitmap对象
	 * @return
	 */
	public static Bitmap toRoundBitmap(Bitmap bitmap) {
		int width = bitmap.getWidth();
		int height = bitmap.getHeight();
		float roundPx;
		float left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;
		if (width <= height) {
			roundPx = width / 2;
			top = 0;
			bottom = width;
			left = 0;
			right = width;
			height = width;
			dst_left = 0;
			dst_top = 0;
			dst_right = width;
			dst_bottom = width;
		} else {
			roundPx = height / 2;
			float clip = (width - height) / 2;
			left = clip;
			right = width - clip;
			top = 0;
			bottom = height;
			width = height;
			dst_left = 0;
			dst_top = 0;
			dst_right = height;
			dst_bottom = height;
		}
		Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);
		Canvas canvas = new Canvas(output);
		final int color = 0xff424242;
		final Paint paint = new Paint();
		final Rect src = new Rect((int) left, (int) top, (int) right,
				(int) bottom);
		final Rect dst = new Rect((int) dst_left, (int) dst_top,
				(int) dst_right, (int) dst_bottom);
		final RectF rectF = new RectF(dst);
		paint.setAntiAlias(true);
		canvas.drawARGB(0, 0, 0, 0);
		paint.setColor(color);
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
		canvas.drawBitmap(bitmap, src, dst, paint);
		return output;
	}
	
	 /**
	* A safer decodeStream method
	* rather than the one of {@link BitmapFactory}
	* which will be easy to get OutOfMemory Exception
	* while loading a big image file.
	* 
	* @param uri
	* @param width
	* @param height
	* @return
	* @throws FileNotFoundException
	*/
	public static Bitmap safeDecodeStream(Context ctx, Uri uri, int width, int height)
	throws FileNotFoundException{
	int scale = 1;
	BitmapFactory.Options options = new BitmapFactory.Options();
	android.content.ContentResolver resolver = ctx.getContentResolver();

	if(width>0 || height>0){
	// Decode image size without loading all data into memory
	options.inJustDecodeBounds = true;
	BitmapFactory.decodeStream(
	new BufferedInputStream(resolver.openInputStream(uri), 16*1024),
	null,
	options);

	int w = options.outWidth;
	int h = options.outHeight;
	while (true) {
	if ((width>0 && w/2 < width)
	|| (height>0 && h/2 < height)){
	break;
	}
	w /= 2;
	h /= 2;
	scale *= 2;
	}
	}

	// Decode with inSampleSize option
	options.inJustDecodeBounds = false;
	options.inSampleSize = scale;
	return BitmapFactory.decodeStream(
	new BufferedInputStream(resolver.openInputStream(uri), 16*1024), 
	null, 
	options);
	} 

	/**
	* A safer decodeStream method
	* rather than the one of {@link BitmapFactory}
	* which will be easy to get OutOfMemory Exception
	* while loading a big image file.
	* 
	* @param is
	* @param width
	* @param height
	* @return
	* @throws FileNotFoundException
	*/
	public static Bitmap safeDecodeStream(InputStream is, int width, int height)
	throws FileNotFoundException{
	int scale = 1;
	BitmapFactory.Options options = new BitmapFactory.Options();
	//android.content.ContentResolver resolver = this.ctx.getContentResolver();

	// Decode image size without loading all data into memory
	options.inJustDecodeBounds = false;
	options.inSampleSize = 4;
	Bitmap bit = BitmapFactory.decodeStream(
	new BufferedInputStream(is, 16*1024),
	null,
	options);
//	int w = options.outWidth;
//	int h = options.outHeight;
//	while (true) {
//	if ((width>0 && w/2 < width)
//	|| (height>0 && h/2 < height)){
//	break;
//	}
//	w /= 2;
//	h /= 2;
//	scale *= 2;
//	}
//	}
//
//	// Decode with inSampleSize option
//	options.inJustDecodeBounds = false;
//	options.inSampleSize = scale;//缩放比例
//	Bitmap bit =BitmapFactory.decodeStream(
//			new BufferedInputStream(is, 16*1024), 
//			null, 
//			options);
	return bit;
	} 

	/**
	* A safer decodeStream method
	* rather than the one of {@link BitmapFactory}
	* which will be easy to get OutOfMemory Exception
	* while loading a big image file.
	* 
	* @param url
	* @param width
	* @param height
	* @return
	* @throws FileNotFoundException
	*/
	public static Bitmap safeDecodeStream(String url, int width, int height)
	throws FileNotFoundException{
	int scale = 1;
	BitmapFactory.Options options = new BitmapFactory.Options();
	//android.content.ContentResolver resolver = this.ctx.getContentResolver();
	   FileInputStream in=new
	            FileInputStream(url);
//	File file = new File(url);
	if(width>0 || height>0){
	// Decode image size without loading all data into memory
	options.inJustDecodeBounds = false;
	Bitmap bit = BitmapFactory.decodeStream(
	new BufferedInputStream(in, 16*1024),
	null,
	options);

	int w = options.outWidth;
	int h = options.outHeight;
	while (true) {
	if ((width>0 && w/2 < width)
	|| (height>0 && h/2 < height)){
	break;
	}
	w /= 2;
	h /= 2;
	scale *= 2;
	}
	}

	// Decode with inSampleSize option
	options.inJustDecodeBounds = false;
	options.inSampleSize = scale;
	return BitmapFactory.decodeStream(
	new BufferedInputStream(in, 16*1024), 
	null, 
	options);
	} 
}
